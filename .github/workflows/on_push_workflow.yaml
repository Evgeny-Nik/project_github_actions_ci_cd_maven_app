name: multi-stage docker build and deploy java app
run-name: ${{ github.actor }} is learning GitHub Actions

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check-version.outputs.VERSION }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Increment version
        uses: 'mickem/gh-action-bump-maven-version@v1.0.0'
        with:
          pom-file: 'pom.xml'

      - name: Save and Print Version
        id: check-version
        run: |
          VERSION=$(grep version pom.xml | grep -v -e '<?xml|~'| head -n 1 | sed 's/[[:space:]]//g' | sed -E 's/<.{0,1}version>//g' | awk '{print $1}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "New Version: $VERSION"

      - name: Build and Tag Docker Image
        run: |
          docker build --build-arg APP_VERSION=${{ env.VERSION }} -t ${{ secrets.DOCKERHUB_USERNAME }}/github_app:${{ env.VERSION }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/github_app:${{ env.VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/github_app:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/github_app:${{ env.VERSION }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/github_app:latest


  provision-ec2:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tf-files
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Debug Print VERSION
        run: echo "VERSION is ${{ env.VERSION }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: '${{ secrets.TF_USER_AWS_KEY }}'
          aws-secret-access-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          aws-region: 'eu-north-1'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_KEY }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var "instance_tag=${{ env.VERSION }}"
